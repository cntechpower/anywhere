// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: agent/rpc/definitions/anywhere.proto

package agent_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnywhereAgentClient is the client API for AnywhereAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnywhereAgentClient interface {
	ListConnections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conns, error)
	KillConnById(ctx context.Context, in *KillConnByIdInput, opts ...grpc.CallOption) (*Empty, error)
	KillAllConnections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ShowStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowStatusOutput, error)
}

type anywhereAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAnywhereAgentClient(cc grpc.ClientConnInterface) AnywhereAgentClient {
	return &anywhereAgentClient{cc}
}

func (c *anywhereAgentClient) ListConnections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Conns, error) {
	out := new(Conns)
	err := c.cc.Invoke(ctx, "/anywhereAgentRpc.AnywhereAgent/ListConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anywhereAgentClient) KillConnById(ctx context.Context, in *KillConnByIdInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anywhereAgentRpc.AnywhereAgent/KillConnById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anywhereAgentClient) KillAllConnections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/anywhereAgentRpc.AnywhereAgent/KillAllConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anywhereAgentClient) ShowStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowStatusOutput, error) {
	out := new(ShowStatusOutput)
	err := c.cc.Invoke(ctx, "/anywhereAgentRpc.AnywhereAgent/ShowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnywhereAgentServer is the server API for AnywhereAgent service.
// All implementations must embed UnimplementedAnywhereAgentServer
// for forward compatibility
type AnywhereAgentServer interface {
	ListConnections(context.Context, *Empty) (*Conns, error)
	KillConnById(context.Context, *KillConnByIdInput) (*Empty, error)
	KillAllConnections(context.Context, *Empty) (*Empty, error)
	ShowStatus(context.Context, *Empty) (*ShowStatusOutput, error)
	mustEmbedUnimplementedAnywhereAgentServer()
}

// UnimplementedAnywhereAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAnywhereAgentServer struct {
}

func (UnimplementedAnywhereAgentServer) ListConnections(context.Context, *Empty) (*Conns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedAnywhereAgentServer) KillConnById(context.Context, *KillConnByIdInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillConnById not implemented")
}
func (UnimplementedAnywhereAgentServer) KillAllConnections(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAllConnections not implemented")
}
func (UnimplementedAnywhereAgentServer) ShowStatus(context.Context, *Empty) (*ShowStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStatus not implemented")
}
func (UnimplementedAnywhereAgentServer) mustEmbedUnimplementedAnywhereAgentServer() {}

// UnsafeAnywhereAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnywhereAgentServer will
// result in compilation errors.
type UnsafeAnywhereAgentServer interface {
	mustEmbedUnimplementedAnywhereAgentServer()
}

func RegisterAnywhereAgentServer(s grpc.ServiceRegistrar, srv AnywhereAgentServer) {
	s.RegisterService(&AnywhereAgent_ServiceDesc, srv)
}

func _AnywhereAgent_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnywhereAgentServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anywhereAgentRpc.AnywhereAgent/ListConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnywhereAgentServer).ListConnections(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnywhereAgent_KillConnById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillConnByIdInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnywhereAgentServer).KillConnById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anywhereAgentRpc.AnywhereAgent/KillConnById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnywhereAgentServer).KillConnById(ctx, req.(*KillConnByIdInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnywhereAgent_KillAllConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnywhereAgentServer).KillAllConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anywhereAgentRpc.AnywhereAgent/KillAllConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnywhereAgentServer).KillAllConnections(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnywhereAgent_ShowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnywhereAgentServer).ShowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anywhereAgentRpc.AnywhereAgent/ShowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnywhereAgentServer).ShowStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AnywhereAgent_ServiceDesc is the grpc.ServiceDesc for AnywhereAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnywhereAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anywhereAgentRpc.AnywhereAgent",
	HandlerType: (*AnywhereAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnections",
			Handler:    _AnywhereAgent_ListConnections_Handler,
		},
		{
			MethodName: "KillConnById",
			Handler:    _AnywhereAgent_KillConnById_Handler,
		},
		{
			MethodName: "KillAllConnections",
			Handler:    _AnywhereAgent_KillAllConnections_Handler,
		},
		{
			MethodName: "ShowStatus",
			Handler:    _AnywhereAgent_ShowStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/rpc/definitions/anywhere.proto",
}
