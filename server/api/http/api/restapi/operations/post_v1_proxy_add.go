// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1ProxyAddHandlerFunc turns a function with the right signature into a post v1 proxy add handler
type PostV1ProxyAddHandlerFunc func(PostV1ProxyAddParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1ProxyAddHandlerFunc) Handle(params PostV1ProxyAddParams) middleware.Responder {
	return fn(params)
}

// PostV1ProxyAddHandler interface for that can handle valid post v1 proxy add params
type PostV1ProxyAddHandler interface {
	Handle(PostV1ProxyAddParams) middleware.Responder
}

// NewPostV1ProxyAdd creates a new http.Handler for the post v1 proxy add operation
func NewPostV1ProxyAdd(ctx *middleware.Context, handler PostV1ProxyAddHandler) *PostV1ProxyAdd {
	return &PostV1ProxyAdd{Context: ctx, Handler: handler}
}

/*PostV1ProxyAdd swagger:route POST /v1/proxy/add postV1ProxyAdd

PostV1ProxyAdd post v1 proxy add API

*/
type PostV1ProxyAdd struct {
	Context *middleware.Context
	Handler PostV1ProxyAddHandler
}

func (o *PostV1ProxyAdd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1ProxyAddParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
