// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/cntechpower/anywhere/server/api/http/api/models"
)

// GetV1WhitelistDenysOKCode is the HTTP code returned for type GetV1WhitelistDenysOK
const GetV1WhitelistDenysOKCode int = 200

/*GetV1WhitelistDenysOK A JSON array of connection

swagger:response getV1WhitelistDenysOK
*/
type GetV1WhitelistDenysOK struct {

	/*
	  In: Body
	*/
	Payload []*models.WhiteListDenyRecordItem `json:"body,omitempty"`
}

// NewGetV1WhitelistDenysOK creates GetV1WhitelistDenysOK with default headers values
func NewGetV1WhitelistDenysOK() *GetV1WhitelistDenysOK {

	return &GetV1WhitelistDenysOK{}
}

// WithPayload adds the payload to the get v1 whitelist denys o k response
func (o *GetV1WhitelistDenysOK) WithPayload(payload []*models.WhiteListDenyRecordItem) *GetV1WhitelistDenysOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 whitelist denys o k response
func (o *GetV1WhitelistDenysOK) SetPayload(payload []*models.WhiteListDenyRecordItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1WhitelistDenysOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.WhiteListDenyRecordItem, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GetV1WhitelistDenysDefault generic errors

swagger:response getV1WhitelistDenysDefault
*/
type GetV1WhitelistDenysDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload models.GenericErrors `json:"body,omitempty"`
}

// NewGetV1WhitelistDenysDefault creates GetV1WhitelistDenysDefault with default headers values
func NewGetV1WhitelistDenysDefault(code int) *GetV1WhitelistDenysDefault {
	if code <= 0 {
		code = 500
	}

	return &GetV1WhitelistDenysDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get v1 whitelist denys default response
func (o *GetV1WhitelistDenysDefault) WithStatusCode(code int) *GetV1WhitelistDenysDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get v1 whitelist denys default response
func (o *GetV1WhitelistDenysDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get v1 whitelist denys default response
func (o *GetV1WhitelistDenysDefault) WithPayload(payload models.GenericErrors) *GetV1WhitelistDenysDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 whitelist denys default response
func (o *GetV1WhitelistDenysDefault) SetPayload(payload models.GenericErrors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1WhitelistDenysDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
