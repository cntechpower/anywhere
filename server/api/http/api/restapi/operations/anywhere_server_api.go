// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAnywhereServerAPI creates a new AnywhereServer instance
func NewAnywhereServerAPI(spec *loads.Document) *AnywhereServerAPI {
	return &AnywhereServerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		UrlformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		GetV1AgentListHandler: GetV1AgentListHandlerFunc(func(params GetV1AgentListParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AgentList has not yet been implemented")
		}),
		GetV1ConnectionListHandler: GetV1ConnectionListHandlerFunc(func(params GetV1ConnectionListParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1ConnectionList has not yet been implemented")
		}),
		GetV1ProxyListHandler: GetV1ProxyListHandlerFunc(func(params GetV1ProxyListParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1ProxyList has not yet been implemented")
		}),
		GetV1SummaryHandler: GetV1SummaryHandlerFunc(func(params GetV1SummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1Summary has not yet been implemented")
		}),
		GetV1SupportIPHandler: GetV1SupportIPHandlerFunc(func(params GetV1SupportIPParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1SupportIP has not yet been implemented")
		}),
		GetV1ZoneListHandler: GetV1ZoneListHandlerFunc(func(params GetV1ZoneListParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1ZoneList has not yet been implemented")
		}),
		PostV1ConnectionKillHandler: PostV1ConnectionKillHandlerFunc(func(params PostV1ConnectionKillParams) middleware.Responder {
			return middleware.NotImplemented("operation PostV1ConnectionKill has not yet been implemented")
		}),
		PostV1ProxyAddHandler: PostV1ProxyAddHandlerFunc(func(params PostV1ProxyAddParams) middleware.Responder {
			return middleware.NotImplemented("operation PostV1ProxyAdd has not yet been implemented")
		}),
		PostV1ProxyDeleteHandler: PostV1ProxyDeleteHandlerFunc(func(params PostV1ProxyDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation PostV1ProxyDelete has not yet been implemented")
		}),
		PostV1ProxyUpdateHandler: PostV1ProxyUpdateHandlerFunc(func(params PostV1ProxyUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostV1ProxyUpdate has not yet been implemented")
		}),
	}
}

/*AnywhereServerAPI the anywhere server API */
type AnywhereServerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// GetV1AgentListHandler sets the operation handler for the get v1 agent list operation
	GetV1AgentListHandler GetV1AgentListHandler
	// GetV1ConnectionListHandler sets the operation handler for the get v1 connection list operation
	GetV1ConnectionListHandler GetV1ConnectionListHandler
	// GetV1ProxyListHandler sets the operation handler for the get v1 proxy list operation
	GetV1ProxyListHandler GetV1ProxyListHandler
	// GetV1SummaryHandler sets the operation handler for the get v1 summary operation
	GetV1SummaryHandler GetV1SummaryHandler
	// GetV1SupportIPHandler sets the operation handler for the get v1 support IP operation
	GetV1SupportIPHandler GetV1SupportIPHandler
	// GetV1ZoneListHandler sets the operation handler for the get v1 zone list operation
	GetV1ZoneListHandler GetV1ZoneListHandler
	// PostV1ConnectionKillHandler sets the operation handler for the post v1 connection kill operation
	PostV1ConnectionKillHandler PostV1ConnectionKillHandler
	// PostV1ProxyAddHandler sets the operation handler for the post v1 proxy add operation
	PostV1ProxyAddHandler PostV1ProxyAddHandler
	// PostV1ProxyDeleteHandler sets the operation handler for the post v1 proxy delete operation
	PostV1ProxyDeleteHandler PostV1ProxyDeleteHandler
	// PostV1ProxyUpdateHandler sets the operation handler for the post v1 proxy update operation
	PostV1ProxyUpdateHandler PostV1ProxyUpdateHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AnywhereServerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AnywhereServerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AnywhereServerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AnywhereServerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AnywhereServerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AnywhereServerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AnywhereServerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AnywhereServerAPI
func (o *AnywhereServerAPI) Validate() error {
	var unregistered []string

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GetV1AgentListHandler == nil {
		unregistered = append(unregistered, "GetV1AgentListHandler")
	}
	if o.GetV1ConnectionListHandler == nil {
		unregistered = append(unregistered, "GetV1ConnectionListHandler")
	}
	if o.GetV1ProxyListHandler == nil {
		unregistered = append(unregistered, "GetV1ProxyListHandler")
	}
	if o.GetV1SummaryHandler == nil {
		unregistered = append(unregistered, "GetV1SummaryHandler")
	}
	if o.GetV1SupportIPHandler == nil {
		unregistered = append(unregistered, "GetV1SupportIPHandler")
	}
	if o.GetV1ZoneListHandler == nil {
		unregistered = append(unregistered, "GetV1ZoneListHandler")
	}
	if o.PostV1ConnectionKillHandler == nil {
		unregistered = append(unregistered, "PostV1ConnectionKillHandler")
	}
	if o.PostV1ProxyAddHandler == nil {
		unregistered = append(unregistered, "PostV1ProxyAddHandler")
	}
	if o.PostV1ProxyDeleteHandler == nil {
		unregistered = append(unregistered, "PostV1ProxyDeleteHandler")
	}
	if o.PostV1ProxyUpdateHandler == nil {
		unregistered = append(unregistered, "PostV1ProxyUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AnywhereServerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AnywhereServerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *AnywhereServerAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *AnywhereServerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *AnywhereServerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AnywhereServerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the anywhere server API
func (o *AnywhereServerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AnywhereServerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/agent/list"] = NewGetV1AgentList(o.context, o.GetV1AgentListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/connection/list"] = NewGetV1ConnectionList(o.context, o.GetV1ConnectionListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/proxy/list"] = NewGetV1ProxyList(o.context, o.GetV1ProxyListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/summary"] = NewGetV1Summary(o.context, o.GetV1SummaryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/support/ip"] = NewGetV1SupportIP(o.context, o.GetV1SupportIPHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/zone/list"] = NewGetV1ZoneList(o.context, o.GetV1ZoneListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/connection/kill"] = NewPostV1ConnectionKill(o.context, o.PostV1ConnectionKillHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/proxy/add"] = NewPostV1ProxyAdd(o.context, o.PostV1ProxyAddHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/proxy/delete"] = NewPostV1ProxyDelete(o.context, o.PostV1ProxyDeleteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/proxy/update"] = NewPostV1ProxyUpdate(o.context, o.PostV1ProxyUpdateHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AnywhereServerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AnywhereServerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AnywhereServerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AnywhereServerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *AnywhereServerAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
