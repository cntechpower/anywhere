// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostV1ProxyUpdateParams creates a new PostV1ProxyUpdateParams object
// with the default values initialized.
func NewPostV1ProxyUpdateParams() *PostV1ProxyUpdateParams {
	var (
		whiteListIpsDefault = string("")
	)
	return &PostV1ProxyUpdateParams{
		WhiteListIps: &whiteListIpsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1ProxyUpdateParamsWithTimeout creates a new PostV1ProxyUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostV1ProxyUpdateParamsWithTimeout(timeout time.Duration) *PostV1ProxyUpdateParams {
	var (
		whiteListIpsDefault = string("")
	)
	return &PostV1ProxyUpdateParams{
		WhiteListIps: &whiteListIpsDefault,

		timeout: timeout,
	}
}

// NewPostV1ProxyUpdateParamsWithContext creates a new PostV1ProxyUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostV1ProxyUpdateParamsWithContext(ctx context.Context) *PostV1ProxyUpdateParams {
	var (
		whiteListIpsDefault = string("")
	)
	return &PostV1ProxyUpdateParams{
		WhiteListIps: &whiteListIpsDefault,

		Context: ctx,
	}
}

// NewPostV1ProxyUpdateParamsWithHTTPClient creates a new PostV1ProxyUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostV1ProxyUpdateParamsWithHTTPClient(client *http.Client) *PostV1ProxyUpdateParams {
	var (
		whiteListIpsDefault = string("")
	)
	return &PostV1ProxyUpdateParams{
		WhiteListIps: &whiteListIpsDefault,
		HTTPClient:   client,
	}
}

/*PostV1ProxyUpdateParams contains all the parameters to send to the API endpoint
for the post v1 proxy update operation typically these are written to a http.Request
*/
type PostV1ProxyUpdateParams struct {

	/*AgentID
	  agent id

	*/
	AgentID string
	/*LocalAddr
	  localAddress

	*/
	LocalAddr string
	/*WhiteListEnable
	  white_list_enable

	*/
	WhiteListEnable bool
	/*WhiteListIps
	  white_list_ips

	*/
	WhiteListIps *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithTimeout(timeout time.Duration) *PostV1ProxyUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithContext(ctx context.Context) *PostV1ProxyUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithHTTPClient(client *http.Client) *PostV1ProxyUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentID adds the agentID to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithAgentID(agentID string) *PostV1ProxyUpdateParams {
	o.SetAgentID(agentID)
	return o
}

// SetAgentID adds the agentId to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetAgentID(agentID string) {
	o.AgentID = agentID
}

// WithLocalAddr adds the localAddr to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithLocalAddr(localAddr string) *PostV1ProxyUpdateParams {
	o.SetLocalAddr(localAddr)
	return o
}

// SetLocalAddr adds the localAddr to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetLocalAddr(localAddr string) {
	o.LocalAddr = localAddr
}

// WithWhiteListEnable adds the whiteListEnable to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithWhiteListEnable(whiteListEnable bool) *PostV1ProxyUpdateParams {
	o.SetWhiteListEnable(whiteListEnable)
	return o
}

// SetWhiteListEnable adds the whiteListEnable to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetWhiteListEnable(whiteListEnable bool) {
	o.WhiteListEnable = whiteListEnable
}

// WithWhiteListIps adds the whiteListIps to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) WithWhiteListIps(whiteListIps *string) *PostV1ProxyUpdateParams {
	o.SetWhiteListIps(whiteListIps)
	return o
}

// SetWhiteListIps adds the whiteListIps to the post v1 proxy update params
func (o *PostV1ProxyUpdateParams) SetWhiteListIps(whiteListIps *string) {
	o.WhiteListIps = whiteListIps
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1ProxyUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param agent_id
	frAgentID := o.AgentID
	fAgentID := frAgentID
	if fAgentID != "" {
		if err := r.SetFormParam("agent_id", fAgentID); err != nil {
			return err
		}
	}

	// form param local_addr
	frLocalAddr := o.LocalAddr
	fLocalAddr := frLocalAddr
	if fLocalAddr != "" {
		if err := r.SetFormParam("local_addr", fLocalAddr); err != nil {
			return err
		}
	}

	// form param white_list_enable
	frWhiteListEnable := o.WhiteListEnable
	fWhiteListEnable := swag.FormatBool(frWhiteListEnable)
	if fWhiteListEnable != "" {
		if err := r.SetFormParam("white_list_enable", fWhiteListEnable); err != nil {
			return err
		}
	}

	if o.WhiteListIps != nil {

		// form param white_list_ips
		var frWhiteListIps string
		if o.WhiteListIps != nil {
			frWhiteListIps = *o.WhiteListIps
		}
		fWhiteListIps := frWhiteListIps
		if fWhiteListIps != "" {
			if err := r.SetFormParam("white_list_ips", fWhiteListIps); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
